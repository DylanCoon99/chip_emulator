## load values into registers and perform arithmetic operations on them


60f3 (Set Register 0 to value 11110011) DONE

61cc (Set Register 1 to value 11001100) DONE

8012 (Bitwise AND V0 and V1) V0: 11000000 (0xc0)


8011 (Bitwise OR V0 and V1) V0: 11001100 (0xcc)


8013 (Bitwise XOR V0 and V1) V0: 00000000 (0x00)


60f3 (Set Register 0 to value 11110011)

8014 (Add V0 and V1) V1: 10111111 (0xbf)   VF: 1

6f00 (Set VF to 0x0)

801


V3: 0x10 (16)

v5: 0x08 (8)

8537 (V3 - V5; store result in V5)


0x10 - 0x08 = 0xf8

Subtract routine:

    xValue = (~xValue + 1);   xValue = 00001000; ~xValue + 1 = 11110111 + 1 = 11111000
    
    int sum = 0;
    int carry = 0;
    
    AddBinaryNumbers(xValue, yValue, &sum, &carry);
    
    SetGeneralRegisterValue(xReg, static_cast<uint8_t>(sum));
    registers.VF = static_cast<uint8_t>(carry);


0x08 - 0x10 =


111
11111000
00010000
00001000 = 0x08

VF = 1




Random Notes

C0ff

Generates a random number and ANDs it with NN -> stores in V0


c0f0

11110000
00000100

00000000





Conditional Jump

3XNN: will skip one instruction if VX == NN
- To test I will load a value into VX and check if equal


4XNN: will skip one instruction if VX != NN
- Change NN to not equal VX

5XY0: will skip one instruction if VX == VY

9XY0: will skip one instruction if VX != VY


3XNN Test (Done)
    60cc // load value 0xcc into V0

    30cc // Conditional jump if equal

    60dd // Placeholder instruction: load value 0xdd into V0 (shouldn't be ran)

    61cc // load value 0xcc into V1


4XNN Test (Done)
    60cc // load value 0xcc into V0

    40cd // Conditional jump if not equal

    60dd // Placeholder instruction: load value 0xdd into V0 (shouldn't be ran)

    61cc // load value 0xcc into V1


5XY0 Test
    60cc // load value 0xcc into V0
    
    61cc // load value 0xcc into V1

    5010 // Conditional jump if equal

    60dd // Placeholder instruction: load value 0xdd into V0 (shouldn't be ran)

    62aa // load value 0xcc into V1


9XY0 Test
    60cc // load value 0xcc into V0
    
    61cd // load value 0xcc into V1

    9010 // Conditional jump if not equal

    60dd // Placeholder instruction: load value 0xdd into V0 (shouldn't be ran)

    62aa // load value 0xcc into V1
